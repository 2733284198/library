<template>
  <view class="map">
    <map id="map" longitude="{{myLong}}" latitude="{{myLat}}" scale="14" markers="{{markers}}"  @markertap="markertap" @regionchange="regionchange" show-location style="width: 100%; height: 900rpx;">
      <cover-view class='btn' style="background: white;width: 200rpx;position: absolute;right: 0;bottom: 12rpx;padding: 12rpx;">
        <cover-image src='/images/position.png'  @tap="moveToLocation" class='ten_l flo_l' style="width: 62rpx;height: 62rpx;margin-right: 22rpx;"></cover-image>
        <cover-image src='/images/search.png' @tap="goto('/pages/library/searchLibrary')" class='code flo_l' style="width: 68rpx;height: 68rpx;"></cover-image>
      </cover-view>
    </map>
  </view>
  <!--<view style="height: 60rpx"></view>-->
  <navigator url="/pages/library/library?id={{distance_library.id}}"  hover-class="weui-cell_active">
    <view style="padding:32rpx 22rpx; background: white;" class="font_32">
      <view>
        <view class="inline-block">
          {{distance_library.name}}
        </view>
        <view class="flo_r" style="color: #35bbe6">{{distance1}}km</view></br>
      </view>
      <view class="inline-block ellipsis_2 font_28" style="width: 92%;margin-top: 16rpx;color: #999999">
        {{distance_library.intro}}
      </view>
      <view class="flo_r bold" style="font-size: 46rpx; color: #35bbe6;margin-top: -62rpx;">></view>
    </view>
  </navigator>

</template>

<script>
  import wepy from 'wepy'
  import http from '../mixins/http'
  import base from '../mixins/base'
  import user from '../mixins/user'
  import ShareMessage from '../mixins/ShareMessage'
  import { service } from '../config.js'

  export default class pageQr extends wepy.page {
    mixins = [base, http, user, ShareMessage]
    config = {
      navigationBarTitleText: '',
      enablePullDownRefresh: false
    }
    data = {
//      markers标记点
      markers: [],
      myLong: '',
      myLat: '',
      distance1: '',
      libraries: '',
      distance_library: {}
    }
    onShow() {
      this.$parent.getTracker(this.$root.$name, this.config.navigationBarTitleText)
    }
    onLoad() {
      this.mapCtx = wx.createMapContext('map')
      this.getCenterLocation()
    }

    getCenterLocation() {
      let that = this
      wx.getLocation({
        type: 'gcj02',
        success: function(res) {
          that.myLong = res.longitude
          that.myLat = res.latitude
          that.$get({
            url: service.maps,
            data: {
              location_latitude: that.myLat,
              location_longitude: that.myLong
            }
          }, {
            success: ({code, data}) => {
              that.distance1 = data.distance1
              that.distance_library = data.distance_library
              that.libraries = data.libraries
              that.libraries.forEach((item, index, arr) => {
                that.markers.push(
                  {
                    iconPath: '/images/icon-position.png',
                    id: item.id,
                    latitude: item.location_latitude,
                    longitude: item.location_longitude,
                    width: 30,
                    height: 30,
                    callout: {
                      content: item.name,
                      color: '#2c8df6',
                      fontSize: 14,
                      borderRadius: 6,
                      bgColor: '#fff',
                      padding: 6,
                      display: 'BYCLICK',
                      boxShadow: '2px 2px 10px #aaa'
                    }
                  }
                )
              })
              console.log(that.markers)
              that.$apply()
              that.noMoreList = false
            },
            fail: ({code, data}) => {},
            complete: () => { this.loading = false}
          })
          that.$apply()
        }
      })
    }

    getLngLat() {
      let that = this
      that.mapCtx = wx.createMapContext('map')
      that.mapCtx.getCenterLocation({
        success: function (res) {
            that.longitude = res.longitude
            that.latitude = res.latitude
            that.markers.push(
              {
                id: 0,
                iconPath: '/images/icon-label.png',
                longitude: res.longitude,
                latitude: res.latitude,
                width: 30,
                height: 30
              }
            )
          console.log(that.markers)
          that.$apply()
        }
      })
    }
    distance() {
      let to = ''
      this.markers.forEach((item, index ,arr) => {
        to = arr[index].latitude + ',' + arr[index].longitude
      })
      let data = {
        mode: 'driving',
        from: this.latitude+ ',' +this.longitude,
        to: to,
        key: 'DQ3BZ-SWT3U-HUQV7-BBO3U-OU7WS-53FBV'
      }
      let url = 'http://apis.map.qq.com/ws/distance/v1/'
      this.$get({url: url,data}, {
        success: ({code, data}) => {
          debugger
          wx.setStorageSync('is_new', data.user.is_news)
          if (data.user.is_news) {
            wepy.showTabBarRedDot({
              index: 4
            })
          } else {
            wepy.hideTabBarRedDot({
              index: 4
            })
          }
        }
      })
    }
    mapLibraries(){
      let that = this
      this.$get({
        url: service.maps,
        data: {
          location_latitude: that.latitude,
          location_longitude: that.longitude
        }
      }, {
        success: ({code, data}) => {
          that.distance1 = data.distance1
          that.distance_library = data.distance_library
          that.$apply()
        },
        fail: ({code, data}) => {},
        complete: () => {this.loading = false}
      })
    }
    methods = {
      goto(url) {
        wx.navigateTo({url: url})
      },
      moveToLocation () {
        this.mapCtx.moveToLocation()
      },
      translateMarker() {
        this.mapCtx.translateMarker({
          markerId: 0,
          autoRotate: true,
          duration: 1000,
          destination: {
            latitude: 23.10229,
            longitude: 113.3345211
          },
          animationEnd() {
            console.log('animation end')
          }
        })
      },
      regionchange(e) {
        console.log(e.type)
        let that = this
        if (e.type == 'end') {
          this.mapLibraries()
          this.getLngLat()
        }else {
          this.mapCtx.getCenterLocation({
            success: function (res) {
              that.longitude= res.longitude
              that.latitude= res.latitude
              that.$apply()
            }
          })
          this.markers.forEach((item, index) => {
            if (item.id == 0) {
              console.log(index)
              this.markers.splice(index, 1)
            }
          })
        }
      },
      markertap(e) {
        console.log(e.markerId)
      },
      controltap(e) {
        console.log(e.controlId)
      }
    }
  }
</script>

<style lang="less">
  page{
    /*background: white;*/
  }
</style>
